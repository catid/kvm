// Copyright 2020 Christopher A. Taylor

/*
    USB Gadget API

    For keyboard input, it makes the most sense for us to have the Javascript
    code track the currently pressed keys and convert to keyboard scan codes.

    The keyboard modifier + scan codes are very compact, taking just 2 bytes
    for a single key down event.

    References:
    [1] http://kbdlayout.info/kbdusx/scancodes
    [2] https://wiki.osdev.org/USB_Human_Interface_Devices
*/

#pragma once

#include "kvm_core.hpp"

#include "Counter.h"

namespace kvm {


//------------------------------------------------------------------------------
// KeyboardEmulator

class KeyboardEmulator
{
public:
    ~KeyboardEmulator()
    {
        Shutdown();
    }

    bool Initialize();
    void Shutdown();

    /*
        Send a set of reports generated by Javascript

        Format:

            Repeated:
                <ID(1 byte)>
                <ModifierKeys(1 byte)>
                <KeypressCount(1 byte)>
                <Keypresses(X bytes)>

        ID should start at 1.

        The ID increments by 1 for each message.  Repeated IDs are ignored, which
        allows the messages to be duplicated.  Duplicates are useful to avoid
        missing keystrokes over the unreliable data-channel.
    */
    bool ParseReports(const uint8_t* data, int bytes);

protected:
    int fd = -1;

    Counter32 PrevIdentifier = 0;

    // Send report
    bool SendReport(uint8_t modifier_keys, const uint8_t* keypresses, int keypress_count);
};


} // namespace kvm

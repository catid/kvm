// Copyright 2020 Christopher A. Taylor

/*
    Tools for transport of input reports over UDP/WebRTC

    This is used for keyboard and mouse input.
    Each WebRTC client session has its own transport.
*/

#pragma once

#include "kvm_core.hpp"
#include "kvm_keyboard.hpp"

#include "Counter.h"

namespace kvm {


//------------------------------------------------------------------------------
// Tools

// Invert the string conversion done in JavaScript
// Precondition: len >= 1
void Invert_convertUint8ArrayToBinaryString(
    const char* buf,
    int len,
    std::vector<uint8_t>& data);


//------------------------------------------------------------------------------
// InputTransport

class InputTransport
{
public:
    KeyboardEmulator* Keyboard = nullptr;

    /*
        Send a set of reports generated by Javascript

        Format:

            Repeated:
                <ID(1 byte)>
                <IsMouse(1 high bit)>
                <Count(7 low bits)>
                <Report(X bytes)>

        ID should start at 1.

        The ID increments by 1 for each message.  Repeated IDs are ignored, which
        allows the messages to be duplicated.  Duplicates are useful to avoid
        missing keystrokes over the unreliable data-channel.
    */
    bool ParseReports(const uint8_t* data, int bytes);

protected:
    Counter32 PrevIdentifier = 0;
};


} // namespace kvm
